<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>apply和call</title>
      <link href="/2022/08/16/apply%E5%92%8Ccall/"/>
      <url>/2022/08/16/apply%E5%92%8Ccall/</url>
      
        <content type="html"><![CDATA[<p><strong>Js apply和call详解</strong><br>我在一开始看到javascript的函数apply和call时,非常的模糊,看也看不懂,最近在网上看到一些文章对apply方法和call的一些示例,总算是看的有点眉目了,在这里我做如下笔记,希望和大家分享..  如有什么不对的或者说法不明确的地方希望读者多多提一些意见,以便共同提高..</p><p>主要我是要解决一下几个问题:</p><ol><li><p>apply和call的区别在哪里</p></li><li><p>什么情况下用apply,什么情况下用call</p></li><li><p>apply的其他巧妙用法（一般在什么情况下可以使用apply）</p></li></ol><p>我首先从网上查到关于apply和call的定义,然后用示例来解释这两个方法的意思和如何去用.</p><pre><code>     apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.</code></pre><p> Function.apply(obj,args)方法能接收两个参数<br>obj：这个对象将代替Function类里this对象<br>args：这个是数组，它将作为参数传给Function（args–&gt;arguments）</p><pre><code>     call:和apply的意思一样,只不过是参数列表不一样.</code></pre><p> Function.call(obj,[param1[,param2[,…[,paramN]]]])<br>obj：这个对象将代替Function类里this对象<br>params：这个是一个参数列表</p><ol><li>apply示例:</li></ol><script type="text/javascript"> /*定义一个人类*/ function Person(name,age) {  this.name=name;  this.age=age; } /*定义一个学生类*/ functionStudent(name,age,grade) {  Person.apply(this,arguments);  this.grade=grade; } //创建一个学生类 var student=new Student("zhangsan",21,"一年级"); //测试 alert("name:"+student.name+"\n"+"age:"+student.age+"\n"+"grade:"+student.grade); //大家可以看到测试结果name:zhangsan age:21  grade:一年级 //学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.</script><p>分析: Person.apply(this,arguments);</p><p>this:在创建对象在这个时候代表的是student</p><p>arguments:是一个数组,也就是[“zhangsan”,”21”,”一年级”];</p><pre><code>               也就是通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面</code></pre><ol start="2"><li>call示例</li></ol><p>在Studen函数里面可以将apply中修改成如下:</p><p>Person.call(this,name,age);</p><p>这样就ok了</p><ol start="3"><li>什么情况下用apply,什么情况下用call</li></ol><p>在给对象参数的情况下,如果参数的形式是数组的时候,比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Person的时候参数的列表是对应一致的(也就是Person和Student的参数列表前两位是一致的) 就可以采用 apply , 如果我的Person的参数列表是这样的(age,name),而Student的参数列表是(name,age,grade),这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Person.call(this,age,name,grade));</p><ol start="4"><li>apply的一些其他巧妙用法</li></ol><p>细心的人可能已经察觉到,在我调用apply方法的时候,第一个参数是对象(this), 第二个参数是一个数组集合, 在调用Person的时候,他需要的不是一个数组,但是为什么他给我一个数组我仍然可以将数组解析为一个一个的参数,这个就是apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:</p><p>a)        Math.max 可以实现得到数组中最大的一项</p><p>因为Math.max 参数里面不支持Math.max([param1,param2]) 也就是数组</p><p>但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max&#x3D;Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项(apply会将一个数组装换为一个参数接一个参数的传递给方法)</p><pre><code>     这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去</code></pre><p>b)        Math.min  可以实现得到数组中最小的一项</p><p>同样和 max是一个思想 var min&#x3D;Math.min.apply(null,array);</p><p>c)        Array.prototype.push 可以实现两个数组合并</p><p>同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:</p><p>  vararr1&#x3D;new Array(“1”,”2”,”3”);</p><p>  vararr2&#x3D;new Array(“4”,”5”,”6”);</p><p>  Array.prototype.push.apply(arr1,arr2);</p><p>也可以这样理解,arr1调用了push方法,参数是通过apply将数组装换为参数列表的集合.</p><p>通常在什么情况下,可以使用apply类似Math.min等之类的特殊用法:</p><p>一般在目标函数只需要n个参数列表,而不接收一个数组的形式（[param1[,param2[,…[,paramN]]]]）,可以通过apply的方式巧妙地解决这个问题!</p><ol start="5"><li>总结:</li></ol><p>一开始我对apply 非常的不懂,最后多看了几遍,自己多敲了几遍代码,才明白了中间的道理,所以,不管做什么事情,只要自己肯动脑子,肯动手敲代码,这样一个技术就会掌握…</p><p>还有比如第四部分得内容,巧妙的解决了实实在在存在的问题,这个肯定不是一个初学者能想到的解决方案(这个也不是我自己想的),没有对编程有一定认识的不会想到这个的,还是一句话,多积累,多学习,提升自己的能力和对编程思想的理解能力才是最关键!</p><p>其中有大部分内容参考自:</p><p><a href="http://www.cnblogs.com/xiaohongwu/archive/2011/06/15/2081237.html">http://www.cnblogs.com/xiaohongwu/archive/2011/06/15/2081237.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly魔改</title>
      <link href="/2022/08/10/butterfly%E9%AD%94%E6%94%B9/"/>
      <url>/2022/08/10/butterfly%E9%AD%94%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>大佬魔改博客:<a href="https://akilar.top/">https://akilar.top/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包解释</title>
      <link href="/2022/08/08/%E9%97%AD%E5%8C%85%E8%A7%A3%E9%87%8A/"/>
      <url>/2022/08/08/%E9%97%AD%E5%8C%85%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>什么是闭包？闭包的优缺点？这已经是前端开发人员老生常谈的了；闭包（closure）是javascript的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。</p><p>参考：<a href="http://www.cnblogs.com/cxying93/p/6103375.html">http://www.cnblogs.com/cxying93/p/6103375.html</a></p><p>1、变量作用域<br>要理解闭包，首先要理解javascript的特殊的变量作用域。</p><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><p>注意点：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量！</p><p>2、不用说我们对JavaScript的变量作用域都甚是了解吧，那么如何从外部读取函数内部的局部变量？<br>出于种种原因，我们有时候需要获取到函数内部的局部变量。但是，上面已经说过了，正常情况下，这是办不到的！只有通过变通的方法才能实现。那就是在函数内部，再定义一个函数。</p><p>function f1(){<br>　　　　var n&#x3D;999;<br>　　　　function f2(){<br>　　　　　　alert(n); &#x2F;&#x2F; 999<br>　　　　}<br>　　}<br>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。</p><p>这就是Javascript语言特有的”链式作用域”结构（chain scope），</p><p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><p>3、那么，什么是闭包呢？<br>上面代码中的f2函数，就是闭包。</p><p>各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。</p><p>由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。</p><p>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p><p> 4、闭包的用途<br>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。</p><p>用途二为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>5、闭包的优点<br>（1）逻辑连续，当闭包作为另一个函数调用参数时，避免脱离当前逻辑而单独编写额外逻辑。</p><p>（2）方便调用上下文的局部变量。</p><p>（3）加强封装性，是第2点的延伸，可以达到对变量的保护作用。</p><p>6、使用闭包的注意点（缺点）<br>（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><p>7、闭包的特性<br>（1）作为函数变量的一个引用。当函数返回时，其处于激活状态。</p><p>（2）闭包就是当一个函数返回时，并没有释放资源的栈区。</p><p>8、闭包对页面的影响<br>通过使用闭包，我们可以做很多事情。比如模拟面向对象的代码风格；更优雅、更简洁的表达出代码；在某些方面提升代码的执行效率。</p><p>9、闭包的工作原理<br>因为闭包只有在被调用时才执行操作，所以它可以被用来定义控制结构。多个函数可以使用同一个环境，这使得他们可以通过改变那个环境相互交流。</p><p>10、使用场景<br>（1）采用函数引用方式的setTimeout调用。</p><p>（2）将函数关联到对象的实例方法。</p><p>（3）封装相关的功能集。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/07/hello-world/"/>
      <url>/2022/08/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
