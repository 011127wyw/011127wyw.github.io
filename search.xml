<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>虚拟列表(加载十万条数据)</title>
      <link href="/2022/08/29/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8-%E5%8A%A0%E8%BD%BD%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/08/29/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8-%E5%8A%A0%E8%BD%BD%E5%8D%81%E4%B8%87%E6%9D%A1%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在工作中，有时会遇到需要一些不能使用分页方式来加载列表数据的业务情况，对于此，我们称这种列表叫做<code>长列表</code>。比如，在一些外汇交易系统中，前端会实时的展示用户的持仓情况(收益、亏损、手数等)，此时对于用户的持仓列表一般是不能分页的。</p><p>在<a href="https://juejin.cn/post/6844903938894872589">高性能渲染十万条数据(时间分片)</a>一文中，提到了可以使用<code>时间分片</code>的方式来对长列表进行渲染，但这种方式更适用于列表项的DOM结构十分简单的情况。本文会介绍使用<code>虚拟列表</code>的方式，来同时加载大量数据。</p><h2 id="为什么需要使用虚拟列表"><a href="#为什么需要使用虚拟列表" class="headerlink" title="为什么需要使用虚拟列表"></a>为什么需要使用虚拟列表</h2><p>假设我们的长列表需要展示10000条记录，我们同时将10000条记录渲染到页面中，先来看看需要花费多长时间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span><br><span class="line">复制代码</span><br><span class="line">document.getElementById(&#x27;button&#x27;).addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">    // 记录任务开始时间</span><br><span class="line">    let now = Date.now();</span><br><span class="line">    // 插入一万条数据</span><br><span class="line">    const total = 10000;</span><br><span class="line">    // 获取容器</span><br><span class="line">    let ul = document.getElementById(&#x27;container&#x27;);</span><br><span class="line">    // 将数据插入容器中</span><br><span class="line">    for (let i = 0; i &lt; total; i++) &#123;</span><br><span class="line">        let li = document.createElement(&#x27;li&#x27;);</span><br><span class="line">        li.innerText = ~~(Math.random() * total)</span><br><span class="line">        ul.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;JS运行时间：&#x27;,Date.now() - now);</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      console.log(&#x27;总运行时间：&#x27;,Date.now() - now);</span><br><span class="line">    &#125;,0)</span><br><span class="line"></span><br><span class="line">    // print JS运行时间： 38</span><br><span class="line">    // print 总运行时间： 957 </span><br><span class="line">  &#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当我们点击按钮，会同时向页面中加入一万条记录，通过控制台的输出，我们可以粗略的统计到，JS的运行时间为<code>38ms</code>,但渲染完成后的总时间为<code>957ms</code>。</p><p>简单说明一下，为何两次<code>console.log</code>的结果时间差异巨大，并且是如何简单来统计<code>JS运行时间</code>和<code>总渲染时间</code>：</p><ul><li>在 JS 的<code>Event Loop</code>中，当JS引擎所管理的执行栈中的事件以及所有微任务事件全部执行完后，才会触发渲染线程对页面进行渲染</li><li>第一个<code>console.log</code>的触发时间是在页面进行渲染之前，此时得到的间隔时间为JS运行所需要的时间</li><li>第二个<code>console.log</code>是放到 setTimeout 中的，它的触发时间是在渲染完成，在下一次<code>Event Loop</code>中执行的</li></ul><p><a href="https://juejin.cn/post/6844903919789801486">关于Event Loop的详细内容请参见这篇文章–&gt;</a></p><p>然后，我们通过<code>Chrome</code>的<code>Performance</code>工具来详细的分析这段代码的性能瓶颈在哪里：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1518f6871e6c6~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>从<code>Performance</code>可以看出，代码从执行到渲染结束，共消耗了<code>960.8ms</code>,其中的主要时间消耗如下：</p><ul><li>Event(click) : <code>40.84ms</code></li><li>Recalculate Style : <code>105.08ms</code></li><li>Layout : <code>731.56ms</code></li><li>Update Layer Tree : <code>58.87ms</code></li><li>Paint : <code>15.32ms</code></li></ul><p>从这里我们可以看出，我们的代码的执行过程中，消耗时间最多的两个阶段是<code>Recalculate Style</code>和<code>Layout</code>。</p><ul><li><code>Recalculate Style</code>：样式计算，浏览器根据css选择器计算哪些元素应该应用哪些规则，确定每个元素具体的样式。</li><li><code>Layout</code>：布局，知道元素应用哪些规则之后，浏览器开始计算它要占据的空间大小及其在屏幕的位置。</li></ul><p>在实际的工作中，列表项必然不会像例子中仅仅只由一个li标签组成，必然是由复杂DOM节点组成的。</p><p>那么可以想象的是，当列表项数过多并且列表项结构复杂的时候，同时渲染时，会在<code>Recalculate Style</code>和<code>Layout</code>阶段消耗大量的时间。</p><p>而<code>虚拟列表</code>就是解决这一问题的一种实现。</p><h2 id="什么是虚拟列表"><a href="#什么是虚拟列表" class="headerlink" title="什么是虚拟列表"></a>什么是虚拟列表</h2><p><code>虚拟列表</code>其实是按需显示的一种实现，即只对<code>可见区域</code>进行渲染，对<code>非可见区域</code>中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p><p>假设有1万条记录需要同时渲染，我们屏幕的<code>可见区域</code>的高度为<code>500px</code>,而列表项的高度为<code>50px</code>，则此时我们在屏幕中最多只能看到10个列表项，那么在首次渲染的时候，我们只需加载10条即可。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15195cf16a558~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>说完首次加载，再分析一下当滚动发生时，我们可以通过计算当前滚动值得知此时在屏幕<code>可见区域</code>应该显示的列表项。</p><p>假设滚动发生，滚动条距顶部的位置为<code>150px</code>,则我们可得知在<code>可见区域</code>内的列表项为<code>第4项</code>至&#96;第13项。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>虚拟列表的实现，实际上就是在首屏加载的时候，只加载<code>可视区域</code>内需要的列表项，当滚动发生时，动态通过计算获得<code>可视区域</code>内的列表项，并将<code>非可视区域</code>内存在的列表项删除。</p><ul><li>计算当前<code>可视区域</code>起始数据索引(<code>startIndex</code>)</li><li>计算当前<code>可视区域</code>结束数据索引(<code>endIndex</code>)</li><li>计算当前<code>可视区域的</code>数据，并渲染到页面中</li><li>计算<code>startIndex</code>对应的数据在整个列表中的偏移位置<code>startOffset</code>并设置到列表上</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>由于只是对<code>可视区域</code>内的列表项进行渲染，所以为了保持列表容器的高度并可正常的触发滚动，将Html结构设计成如下结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infinite-list-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infinite-list-phantom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infinite-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item-1 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item-2 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- ...... --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item-n --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><code>infinite-list-container</code> 为<code>可视区域</code>的容器</li><li><code>infinite-list-phantom</code> 为容器内的占位，高度为总列表高度，用于形成滚动条</li><li><code>infinite-list</code> 为列表项的<code>渲染区域</code></li></ul><p>接着，监听<code>infinite-list-container</code>的<code>scroll</code>事件，获取滚动位置<code>scrollTop</code></p><ul><li>假定<code>可视区域</code>高度固定，称之为<code>screenHeight</code></li><li>假定<code>列表每项</code>高度固定，称之为<code>itemSize</code></li><li>假定<code>列表数据</code>称之为<code>listData</code></li><li>假定<code>当前滚动位置</code>称之为<code>scrollTop</code></li></ul><p>则可推算出：</p><ul><li>列表总高度<code>listHeight</code> &#x3D; listData.length * itemSize</li><li>可显示的列表项数<code>visibleCount</code> &#x3D; Math.ceil(screenHeight &#x2F; itemSize)</li><li>数据的起始索引<code>startIndex</code> &#x3D; Math.floor(scrollTop &#x2F; itemSize)</li><li>数据的结束索引<code>endIndex</code> &#x3D; startIndex + visibleCount</li><li>列表显示数据为<code>visibleData</code> &#x3D; listData.slice(startIndex,endIndex)</li></ul><p>当滚动后，由于<code>渲染区域</code>相对于<code>可视区域</code>已经发生了偏移，此时我需要获取一个偏移量<code>startOffset</code>，通过样式控制将<code>渲染区域</code>偏移至<code>可视区域</code>中。</p><ul><li>偏移量<code>startOffset</code> &#x3D; scrollTop - (scrollTop % itemSize);</li></ul><p>最终的<code>简易代码</code>如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=<span class="string">&quot;list&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;infinite-list-container&quot;</span> <span class="variable">@scroll</span>=<span class="string">&quot;scrollEvent($event)&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;infinite-list-phantom&quot;</span> <span class="symbol">:style=<span class="string">&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span></span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;infinite-list&quot;</span> <span class="symbol">:style=<span class="string">&quot;&#123; transform: getTransform &#125;&quot;</span>&gt;</span></span><br><span class="line">      &lt;div ref=<span class="string">&quot;items&quot;</span></span><br><span class="line">        <span class="keyword">class</span>=<span class="string">&quot;infinite-list-item&quot;</span></span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;item in visibleData&quot;</span></span><br><span class="line">        <span class="symbol">:key=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line">        <span class="symbol">:style=<span class="string">&quot;&#123; height: itemSize + &#x27;px&#x27;,lineHeight: itemSize + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line">      &gt;&#123;&#123; item.value &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/div</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/template</span>&gt;</span><br><span class="line">复制代码</span><br><span class="line">export default &#123;</span><br><span class="line">  <span class="symbol">name:</span><span class="string">&#x27;VirtualList&#x27;</span>,</span><br><span class="line">  <span class="symbol">props:</span> &#123;</span><br><span class="line">    <span class="regexp">//</span>所有列表数据</span><br><span class="line">    <span class="symbol">listData:</span>&#123;</span><br><span class="line">      <span class="symbol">type:</span>Array,</span><br><span class="line">      <span class="symbol">default:</span>()=&gt;[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>每项高度</span><br><span class="line">    <span class="symbol">itemSize:</span> &#123;</span><br><span class="line">      <span class="symbol">type:</span> Number,</span><br><span class="line">      <span class="symbol">default:</span><span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="symbol">computed:</span>&#123;</span><br><span class="line">    <span class="regexp">//</span>列表总高度</span><br><span class="line">    listHeight()&#123;</span><br><span class="line">      <span class="keyword">return</span> this.listData.length * this.itemSize;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>可显示的列表项数</span><br><span class="line">    visibleCount()&#123;</span><br><span class="line">      <span class="keyword">return</span> Math.ceil(this.screenHeight / this.itemSize)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>偏移量对应的style</span><br><span class="line">    getTransform()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`translate3d(0,$&#123;this.startOffset&#125;px,0)`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>获取真实显示列表数据</span><br><span class="line">    visibleData()&#123;</span><br><span class="line">      <span class="keyword">return</span> this.listData.slice(this.start, Math.min(this.<span class="keyword">end</span>,this.listData.length));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.screenHeight = this.<span class="variable">$el</span>.clientHeight;</span><br><span class="line">    this.start = <span class="number">0</span>;</span><br><span class="line">    this.<span class="keyword">end</span> = this.start + this.visibleCount;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="regexp">//</span>可视区域高度</span><br><span class="line">      <span class="symbol">screenHeight:</span><span class="number">0</span>,</span><br><span class="line">      <span class="regexp">//</span>偏移量</span><br><span class="line">      <span class="symbol">startOffset:</span><span class="number">0</span>,</span><br><span class="line">      <span class="regexp">//</span>起始索引</span><br><span class="line">      <span class="symbol">start:</span><span class="number">0</span>,</span><br><span class="line">      <span class="regexp">//</span>结束索引</span><br><span class="line">      <span class="symbol">end:</span>null,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="symbol">methods:</span> &#123;</span><br><span class="line">    scrollEvent() &#123;</span><br><span class="line">      <span class="regexp">//</span>当前滚动位置</span><br><span class="line">      let scrollTop = this.<span class="variable">$refs</span>.list.scrollTop;</span><br><span class="line">      <span class="regexp">//</span>此时的开始索引</span><br><span class="line">      this.start = Math.floor(scrollTop / this.itemSize);</span><br><span class="line">      <span class="regexp">//</span>此时的结束索引</span><br><span class="line">      this.<span class="keyword">end</span> = this.start + this.visibleCount;</span><br><span class="line">      <span class="regexp">//</span>此时的偏移量</span><br><span class="line">      this.startOffset = scrollTop - (scrollTop % this.itemSize);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><a href="https://link.juejin.cn/?target=https://codesandbox.io/s/virtuallist-1-rp8pi">点击查看在线DEMO及完整代码</a></p><p>最终效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="列表项动态高度"><a href="#列表项动态高度" class="headerlink" title="列表项动态高度"></a>列表项动态高度</h2><p>在之前的实现中，列表项的高度是固定的，因为高度固定，所以可以很轻易的获取列表项的整体高度以及滚动时的显示数据与对应的偏移量。而实际应用的时候，当列表中包含文本之类的可变内容，会导致列表项的高度并不相同。</p><p>比如这种情况：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519f1e121be9~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>在虚拟列表中应用动态高度的解决方案一般有如下三种：</p><blockquote><p>1.对组件属性<code>itemSize</code>进行扩展，支持传递类型为<code>数字</code>、<code>数组</code>、<code>函数</code></p></blockquote><ul><li>可以是一个固定值，如 100，此时列表项是固高的</li><li>可以是一个包含所有列表项高度的数据，如 [50, 20, 100, 80, …]</li><li>可以是一个根据列表项索引返回其高度的函数：(index: number): number</li></ul><p>这种方式虽然有比较好的灵活度，但仅适用于可以预先知道或可以通过计算得知列表项高度的情况，依然无法解决列表项高度由内容撑开的情况。</p><blockquote><p>2.将列表项<code>渲染到屏幕外</code>，对其高度进行测量并缓存，然后再将其渲染至可视区域内。</p></blockquote><p>由于预先渲染至屏幕外，再渲染至屏幕内，这导致渲染成本增加一倍，这对于数百万用户在低端移动设备上使用的产品来说是不切实际的。</p><blockquote><p>3.以<code>预估高度</code>先行渲染，然后获取真实高度并缓存。</p></blockquote><p>这是我选择的实现方式，可以避免前两种方案的不足。</p><p>接下来，来看如何简易的实现：</p><p>定义组件属性<code>estimatedItemSize</code>,用于接收<code>预估高度</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  //预估高度</span><br><span class="line">  estimatedItemSize:&#123;</span><br><span class="line">    type:Number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>定义<code>positions</code>，用于列表项渲染后存储<code>每一项的高度以及位置</code>信息，</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.positions = [</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   top:0,</span></span><br><span class="line">  <span class="comment">//   bottom:100,</span></span><br><span class="line">  <span class="comment">//   height:100</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">];</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>并在初始时根据<code>estimatedItemSize</code>对<code>positions</code>进行初始化。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">initPositions()&#123;</span><br><span class="line">  <span class="keyword">this</span>.positions = <span class="keyword">this</span>.listData.map((item,index)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      index,</span><br><span class="line">      height:<span class="keyword">this</span>.estimatedItemSize,</span><br><span class="line">      top:index * <span class="keyword">this</span>.estimatedItemSize,</span><br><span class="line">      bottom:(index + <span class="number">1</span>) * <span class="keyword">this</span>.estimatedItemSize</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>由于列表项高度不定，并且我们维护了<code>positions</code>，用于记录每一项的位置，而<code>列表高度</code>实际就等于列表中最后一项的底部距离列表顶部的位置。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列表总高度</span></span><br><span class="line">listHeight()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.positions[<span class="keyword">this</span>.positions.length - <span class="number">1</span>].bottom;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>由于需要在<code>渲染完成</code>后，获取列表每项的位置信息并缓存，所以使用钩子函数<code>updated</code>来实现：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">updated()&#123;</span><br><span class="line">  let <span class="attr">nodes</span> = this.<span class="variable">$refs</span>.items<span class="comment">;</span></span><br><span class="line">  nodes.forEach((node)=&gt;&#123;</span><br><span class="line">    let <span class="attr">rect</span> = node.getBoundingClientRect()<span class="comment">;</span></span><br><span class="line">    let <span class="attr">height</span> = rect.height<span class="comment">;</span></span><br><span class="line">    let <span class="attr">index</span> = +node.id.slice(<span class="number">1</span>)</span><br><span class="line">    let <span class="attr">oldHeight</span> = this.positions[index].height<span class="comment">;</span></span><br><span class="line">    let <span class="attr">dValue</span> = oldHeight - height<span class="comment">;</span></span><br><span class="line">    //存在差值</span><br><span class="line">    if(dValue)&#123;</span><br><span class="line">      this.positions<span class="section">[index]</span>.<span class="attr">bottom</span> = this.positions[index].bottom - dValue<span class="comment">;</span></span><br><span class="line">      this.positions<span class="section">[index]</span>.<span class="attr">height</span> = height<span class="comment">;</span></span><br><span class="line">      for(let <span class="attr">k</span> = index + <span class="number">1</span><span class="comment">;k&lt;this.positions.length; k++)&#123;</span></span><br><span class="line">        this.positions<span class="section">[k]</span>.<span class="attr">top</span> = this.positions[k-<span class="number">1</span>].bottom<span class="comment">;</span></span><br><span class="line">        this.positions<span class="section">[k]</span>.<span class="attr">bottom</span> = this.positions[k].bottom - dValue<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>滚动后获取列表<code>开始索引</code>的方法修改为通过<code>缓存</code>获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取列表起始索引</span></span><br><span class="line"><span class="title function_">getStartIndex</span>(<span class="params">scrollTop = <span class="number">0</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> item = <span class="variable language_">this</span>.<span class="property">positions</span>.<span class="title function_">find</span>(<span class="function"><span class="params">i</span> =&gt;</span> i &amp;&amp; i.<span class="property">bottom</span> &gt; scrollTop);</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">index</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>由于我们的缓存数据，本身就是有顺序的，所以获取<code>开始索引</code>的方法可以考虑通过<code>二分查找</code>的方式来降低检索次数：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//获取列表起始索引</span><br><span class="line">getStartIndex(<span class="attr">scrollTop</span> = <span class="number">0</span>)&#123;</span><br><span class="line">  //二分法查找</span><br><span class="line">  return this.binarySearch(this.positions,scrollTop)</span><br><span class="line">&#125;,</span><br><span class="line">//二分法查找</span><br><span class="line">binarySearch(list,value)&#123;</span><br><span class="line">  let <span class="attr">start</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">  let <span class="attr">end</span> = list.length - <span class="number">1</span><span class="comment">;</span></span><br><span class="line">  let <span class="attr">tempIndex</span> = null<span class="comment">;</span></span><br><span class="line">  while(start &lt;= end)&#123;</span><br><span class="line">    let <span class="attr">midIndex</span> = parseInt((start + end)/<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">    let <span class="attr">midValue</span> = list[midIndex].bottom<span class="comment">;</span></span><br><span class="line">    if(<span class="attr">midValue</span> === value)&#123;</span><br><span class="line">      return midIndex + 1<span class="comment">;</span></span><br><span class="line">    &#125;else if(midValue &lt; value)&#123;</span><br><span class="line">      <span class="attr">start</span> = midIndex + <span class="number">1</span><span class="comment">;</span></span><br><span class="line">    &#125;else if(midValue &gt; value)&#123;</span><br><span class="line">      if(<span class="attr">tempIndex</span> === null || tempIndex &gt; midIndex)&#123;</span><br><span class="line">        <span class="attr">tempIndex</span> = midIndex<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attr">end</span> = end - <span class="number">1</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return tempIndex<span class="comment">;</span></span><br><span class="line">&#125;,</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>滚动后将<code>偏移量</code>的获取方式变更：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scrollEvent() &#123;</span><br><span class="line">  <span class="comment">//...省略</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.start &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.startOffset = <span class="keyword">this</span>.positions[<span class="keyword">this</span>.start - <span class="number">1</span>].bottom</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startOffset = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>通过<a href="https://link.juejin.cn/?target=https://github.com/marak/Faker.js/">faker.js</a> 来创建一些<code>随机数据</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> data = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> <span class="built_in">id</span> = 0; <span class="built_in">id</span> &lt; 10000; <span class="built_in">id</span>++) &#123;</span><br><span class="line">  data.push(&#123;</span><br><span class="line">    <span class="built_in">id</span>,</span><br><span class="line">    value: faker.lorem.sentences() // 长文本</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><a href="https://link.juejin.cn/?target=https://codesandbox.io/s/virtuallist2-1bqk6">点击查看在线DEMO及完整代码</a></p><p>最终效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e96584b690~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>从演示效果上看，我们实现了基于<code>文字内容动态撑高列表项</code>情况下的<code>虚拟列表</code>，但是我们可能会发现，当滚动过快时，会出现短暂的<code>白屏现象</code>。</p><p>为了使页面平滑滚动，我们还需要在<code>可见区域</code>的上方和下方渲染额外的项目，在滚动时给予一些<code>缓冲</code>，所以将屏幕分为三个区域：</p><ul><li>可视区域上方：<code>above</code></li><li>可视区域：<code>screen</code></li><li>可视区域下方：<code>below</code></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151a59317cae7~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>定义组件属性<code>bufferScale</code>,用于接收<code>缓冲区数据</code>与<code>可视区数据</code>的<code>比例</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  //缓冲区比例</span><br><span class="line">  bufferScale:&#123;</span><br><span class="line">    type:Number,</span><br><span class="line">    default:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>可视区上方渲染条数<code>aboveCount</code>获取方式如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aboveCount()&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.min(<span class="keyword">this</span>.start,<span class="keyword">this</span>.bufferScale * <span class="keyword">this</span>.visibleCount)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>可视区下方渲染条数<code>belowCount</code>获取方式如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">belowCount()&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.min(<span class="keyword">this</span>.listData.length - <span class="keyword">this</span>.end,<span class="keyword">this</span>.bufferScale * <span class="keyword">this</span>.visibleCount);</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>真实渲染数据<code>visibleData</code>获取方式如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">visibleData()&#123;</span><br><span class="line">  let start = <span class="keyword">this</span>.start - <span class="keyword">this</span>.aboveCount;</span><br><span class="line">  let end = <span class="keyword">this</span>.end + <span class="keyword">this</span>.belowCount;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._listData.slice(start, end);</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><a href="https://link.juejin.cn/?target=https://codesandbox.io/s/virtuallist-3-i3h9v">点击查看在线DEMO及完整代码</a></p><p>最终效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151ee0eb0fc89~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><blockquote><p>基于这个方案，个人开发了一个基于Vue2.x的虚拟列表组件：<a href="https://link.juejin.cn/?target=https://github.com/chenqf/vue-virtual-listview">vue-virtual-listview</a>,可<a href="https://link.juejin.cn/?target=https://github.com/chenqf/vue-virtual-listview">点击查看完整代码</a>。</p></blockquote><h2 id="面向未来"><a href="#面向未来" class="headerlink" title="面向未来"></a>面向未来</h2><p>在前文中我们使用<code>监听scroll事件</code>的方式来触发可视区域中数据的更新，当滚动发生后，scroll事件会频繁触发，很多时候会造成<code>重复计算</code>的问题，从性能上来说无疑存在浪费的情况。</p><p>可以使用<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">IntersectionObserver</a>替换监听scroll事件，<code>IntersectionObserver</code>可以监听目标元素是否出现在可视区域内，在监听的回调事件中执行可视区域数据的更新，并且<code>IntersectionObserver</code>的监听回调是异步触发，不随着目标元素的滚动而触发，性能消耗极低。</p><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>我们虽然实现了根据列表项动态高度下的虚拟列表，但如果列表项中包含图片，并且列表高度由图片撑开，由于图片会发送网络请求，此时无法保证我们在获取列表项真实高度时图片是否已经加载完成，从而造成计算不准确的情况。</p><p>这种情况下，如果我们能监听列表项的大小变化就能获取其真正的高度了。我们可以使用<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver">ResizeObserver</a>来监听列表项内容区域的高度改变，从而实时获取每一列表项的高度。</p><p>不过遗憾的是，在撰写本文的时候，仅有少数<a href="https://link.juejin.cn/?target=https://www.caniuse.com/%23search=ResizeObserver">浏览器支持</a><code>ResizeObserver</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://link.juejin.cn/?target=https://github.com/dwqs/blog/issues/70">浅说虚拟列表的实现原理</a></li><li><a href="https://link.juejin.cn/?target=https://github.com/dwqs/blog/issues/72">react-virtualized组件的虚拟列表实现</a></li><li><a href="https://link.juejin.cn/?target=https://itsze.ro/blog/2017/04/09/infinite-list-and-react.html">React和无限列表</a></li><li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/34585166">再谈前端虚拟列表的实现</a></li></ul><p>作者：云中桥<br>链接：<a href="https://juejin.cn/post/6844903982742110216">https://juejin.cn/post/6844903982742110216</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>apply和call</title>
      <link href="/2022/08/16/apply%E5%92%8Ccall/"/>
      <url>/2022/08/16/apply%E5%92%8Ccall/</url>
      
        <content type="html"><![CDATA[<p><strong>Js apply和call详解</strong><br>我在一开始看到javascript的函数apply和call时,非常的模糊,看也看不懂,最近在网上看到一些文章对apply方法和call的一些示例,总算是看的有点眉目了,在这里我做如下笔记,希望和大家分享..  如有什么不对的或者说法不明确的地方希望读者多多提一些意见,以便共同提高..</p><p>主要我是要解决一下几个问题:</p><ol><li><p>apply和call的区别在哪里</p></li><li><p>什么情况下用apply,什么情况下用call</p></li><li><p>apply的其他巧妙用法（一般在什么情况下可以使用apply）</p></li></ol><p>我首先从网上查到关于apply和call的定义,然后用示例来解释这两个方法的意思和如何去用.</p><pre><code>     apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.</code></pre><p> Function.apply(obj,args)方法能接收两个参数<br>obj：这个对象将代替Function类里this对象<br>args：这个是数组，它将作为参数传给Function（args–&gt;arguments）</p><pre><code>     call:和apply的意思一样,只不过是参数列表不一样.</code></pre><p> Function.call(obj,[param1[,param2[,…[,paramN]]]])<br>obj：这个对象将代替Function类里this对象<br>params：这个是一个参数列表</p><ol><li>apply示例:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt; \n</span><br><span class="line"> <span class="comment">/*定义一个人类*/</span>    </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*定义一个学生类*/</span></span><br><span class="line"> <span class="title function_">functionStudent</span>(name,age,grade)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">grade</span>=grade;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建一个学生类</span></span><br><span class="line"> <span class="keyword">var</span> student=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">21</span>,<span class="string">&quot;一年级&quot;</span>);</span><br><span class="line"> <span class="comment">//测试</span></span><br><span class="line"> <span class="title function_">alert</span>(<span class="string">&quot;name:&quot;</span>+student.<span class="property">name</span>+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;age:&quot;</span>+student.<span class="property">age</span>+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;grade:&quot;</span>+student.<span class="property">grade</span>);</span><br><span class="line"> <span class="comment">//大家可以看到测试结果name:zhangsan age:21  grade:一年级</span></span><br><span class="line"> <span class="comment">//学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.</span></span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>分析: Person.apply(this,arguments);</p><p>this:在创建对象在这个时候代表的是student</p><p>arguments:是一个数组,也就是[“zhangsan”,”21”,”一年级”];<br> 也就是通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面</p><ol start="2"><li>call示例</li></ol><p>在Studen函数里面可以将apply中修改成如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">`Person.call(this,name,age);`</span></span><br></pre></td></tr></table></figure><p>这样就ok了</p><ol start="3"><li>什么情况下用apply,什么情况下用call</li></ol><p>在给对象参数的情况下,如果参数的形式是数组的时候,比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Person的时候参数的列表是对应一致的(也就是Person和Student的参数列表前两位是一致的) 就可以采用 apply , 如果我的Person的参数列表是这样的(age,name),而Student的参数列表是(name,age,grade),这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Person.call(this,age,name,grade));</p><ol start="4"><li>apply的一些其他巧妙用法</li></ol><p>细心的人可能已经察觉到,在我调用apply方法的时候,第一个参数是对象(this), 第二个参数是一个数组集合, 在调用Person的时候,他需要的不是一个数组,但是为什么他给我一个数组我仍然可以将数组解析为一个一个的参数,这个就是apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:</p><p>a)        Math.max 可以实现得到数组中最大的一项</p><p>因为Math.max 参数里面不支持Math.max([param1,param2]) 也就是数组</p><p>但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max&#x3D;Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项(apply会将一个数组装换为一个参数接一个参数的传递给方法)</p><p> 这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去</p><p>b)        Math.min  可以实现得到数组中最小的一项</p><p>同样和 max是一个思想 var min&#x3D;Math.min.apply(null,array);</p><p>c)        Array.prototype.push 可以实现两个数组合并</p><p>同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vararr1=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">vararr2=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">apply</span>(arr1,arr2);</span><br></pre></td></tr></table></figure><p>也可以这样理解,arr1调用了push方法,参数是通过apply将数组装换为参数列表的集合.</p><p>通常在什么情况下,可以使用apply类似Math.min等之类的特殊用法:</p><p>一般在目标函数只需要n个参数列表,而不接收一个数组的形式（[param1[,param2[,…[,paramN]]]]）,可以通过apply的方式巧妙地解决这个问题!</p><ol start="5"><li>总结:</li></ol><p>一开始我对apply 非常的不懂,最后多看了几遍,自己多敲了几遍代码,才明白了中间的道理,所以,不管做什么事情,只要自己肯动脑子,肯动手敲代码,这样一个技术就会掌握…</p><p>还有比如第四部分得内容,巧妙的解决了实实在在存在的问题,这个肯定不是一个初学者能想到的解决方案(这个也不是我自己想的),没有对编程有一定认识的不会想到这个的,还是一句话,多积累,多学习,提升自己的能力和对编程思想的理解能力才是最关键!</p><p>其中有大部分内容参考自:</p><p><a href="http://www.cnblogs.com/xiaohongwu/archive/2011/06/15/2081237.html">http://www.cnblogs.com/xiaohongwu/archive/2011/06/15/2081237.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly魔改</title>
      <link href="/2022/08/10/butterfly%E9%AD%94%E6%94%B9/"/>
      <url>/2022/08/10/butterfly%E9%AD%94%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>大佬魔改博客:<a href="https://akilar.top/">https://akilar.top/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包解释</title>
      <link href="/2022/08/08/%E9%97%AD%E5%8C%85%E8%A7%A3%E9%87%8A/"/>
      <url>/2022/08/08/%E9%97%AD%E5%8C%85%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>什么是闭包？闭包的优缺点？这已经是前端开发人员老生常谈的了；闭包（closure）是javascript的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。</p><p>参考：<a href="http://www.cnblogs.com/cxying93/p/6103375.html">http://www.cnblogs.com/cxying93/p/6103375.html</a></p><p>1、变量作用域<br>要理解闭包，首先要理解javascript的特殊的变量作用域。</p><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><p>注意点：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量！</p><p>2、不用说我们对JavaScript的变量作用域都甚是了解吧，那么如何从外部读取函数内部的局部变量？<br>出于种种原因，我们有时候需要获取到函数内部的局部变量。但是，上面已经说过了，正常情况下，这是办不到的！只有通过变通的方法才能实现。那就是在函数内部，再定义一个函数。</p><p>function f1(){<br>　　　　var n&#x3D;999;<br>　　　　function f2(){<br>　　　　　　alert(n); &#x2F;&#x2F; 999<br>　　　　}<br>　　}<br>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。</p><p>这就是Javascript语言特有的”链式作用域”结构（chain scope），</p><p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><p>3、那么，什么是闭包呢？<br>上面代码中的f2函数，就是闭包。</p><p>各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。</p><p>由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。</p><p>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p><p> 4、闭包的用途<br>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。</p><p>用途二为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>5、闭包的优点<br>（1）逻辑连续，当闭包作为另一个函数调用参数时，避免脱离当前逻辑而单独编写额外逻辑。</p><p>（2）方便调用上下文的局部变量。</p><p>（3）加强封装性，是第2点的延伸，可以达到对变量的保护作用。</p><p>6、使用闭包的注意点（缺点）<br>（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><p>7、闭包的特性<br>（1）作为函数变量的一个引用。当函数返回时，其处于激活状态。</p><p>（2）闭包就是当一个函数返回时，并没有释放资源的栈区。</p><p>8、闭包对页面的影响<br>通过使用闭包，我们可以做很多事情。比如模拟面向对象的代码风格；更优雅、更简洁的表达出代码；在某些方面提升代码的执行效率。</p><p>9、闭包的工作原理<br>因为闭包只有在被调用时才执行操作，所以它可以被用来定义控制结构。多个函数可以使用同一个环境，这使得他们可以通过改变那个环境相互交流。</p><p>10、使用场景<br>（1）采用函数引用方式的setTimeout调用。</p><p>（2）将函数关联到对象的实例方法。</p><p>（3）封装相关的功能集。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/07/hello-world/"/>
      <url>/2022/08/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
